{"name": "Добавление товара в корзину", "status": "failed", "statusDetails": {"message": "AssertionError: (TimeoutException('', None, None), \"Время ожидания элемента 'css selector = .alert.alert-success.alert-dismissible' истекло\")", "trace": "self = <Catalog.Catalog object at 0x7f4a62fe00b8>, locator = ('css selector', '.alert.alert-success.alert-dismissible'), timeout = 3\n\n    def wait_web_element(self, locator, timeout=2):\n        self.logger.info('Waiting for the element {} within {} seconds'.format(locator, timeout))\n        try:\n>           el = WebDriverWait(self.browser, timeout).until(EC.visibility_of_element_located(locator))\n\nLocators.py:111: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"91691df1-5e9f-4a55-9f7a-f6fe0f92a93f\")>\nmethod = <selenium.webdriver.support.expected_conditions.visibility_of_element_located object at 0x7f4a62fcf940>, message = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value is not False.\"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.time() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n../venv/lib/python3.6/site-packages/selenium/webdriver/support/wait.py:80: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nbrowser = <selenium.webdriver.firefox.webdriver.WebDriver (session=\"91691df1-5e9f-4a55-9f7a-f6fe0f92a93f\")>, base_url = 'http://10.0.2.15/'\n\n    @allure.title(\"Добавление товара в корзину\")\n    def test_add_to_cart(browser, base_url):\n        \"\"\" Проверяем добавление товара в корзину \"\"\"\n        cat = Catalog(browser)\n        cat.go_to_catalog(base_url)\n        all_buttons_to_add = cat.find_all_specified_elements(cat.ADD_TO_CART)\n        random.choice(all_buttons_to_add).click()\n>       cat.wait_web_element(cat.ALERT_SUCCESS, timeout=3)\n\ntest_catalog.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Catalog.Catalog object at 0x7f4a62fe00b8>, locator = ('css selector', '.alert.alert-success.alert-dismissible'), timeout = 3\n\n    def wait_web_element(self, locator, timeout=2):\n        self.logger.info('Waiting for the element {} within {} seconds'.format(locator, timeout))\n        try:\n            el = WebDriverWait(self.browser, timeout).until(EC.visibility_of_element_located(locator))\n        except TimeoutException as time_is_up:\n            self.logger.error(\"Element \\'{} = {}\\' was not found on the page\".format(*locator))\n>           raise AssertionError(time_is_up, \"Время ожидания элемента \\'{} = {}\\' истекло\".format(*locator))\nE           AssertionError: (TimeoutException('', None, None), \"Время ожидания элемента 'css selector = .alert.alert-success.alert-dismissible' истекло\")\n\nLocators.py:114: AssertionError"}, "description": " Проверяем добавление товара в корзину ", "attachments": [{"name": "log", "source": "d9d649d2-2741-430c-84d9-31a69250160a-attachment.txt", "type": "text/plain"}], "start": 1632399939972, "stop": 1632399947296, "uuid": "e8aa4ce8-e482-4712-a57a-a7ec641a5508", "historyId": "f3e28248619c286b2c5f1e6ecaee6226", "testCaseId": "e0e532b2b31e7a8970a811e570c168d0", "fullName": "test_catalog#test_add_to_cart", "labels": [{"name": "suite", "value": "test_catalog"}, {"name": "host", "value": "max-VirtualBox"}, {"name": "thread", "value": "24358-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_catalog"}]}