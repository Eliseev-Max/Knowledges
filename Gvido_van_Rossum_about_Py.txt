Предисловие Гвидо Ван Россум (Guido van Rossum) к первому изданию книги Марка Лутца (Mark Lutz) «Программирование на Python» («Programming Python»)

As Python's creator, I'd like to say a few words about its origins, adding a bit of personal philosophy.
Как создатель Python, я хотел бы сказать несколько слов о его возникновении, добавив немного личной философии.
Over six years ago, in December 1989, I was looking for a "hobby" programming project that would keep me occupied during the week around Christmas.
Более 6 лет назад, в декабре 1989 года, я искал проект по программированию в качестве хобби, который занял бы меня на Рождественских праздниках.
My office (a government-run research lab in Amsterdam) would be closed, but I had a home computer, and not much else on my hands.
Мой офис (государственная исследовательская лаборатория в Амстердаме) был закрыт, но дома у меня был компьютер, и ничего более.
I decided to write an interpreter for the new scripting language I had been thinking about lately: a descendant of ABC that would appeal to Unix/C hackers.
Я решил написать интерпретатор для нового языка программирования, о котором на дня думал: потомке АВС, который привлёк бы Unix/C- хакеров.
I chose Python as a working title for the project, being in a slightly irreverent mood (and a big fan of Monty Python's Flying Circus).
Я выбрал “Python” как рабочее название проекта будучи в слегка непочтительном настроении (и будучи большим поклонником юмористического шоу (прим. переводчика) «Летающего Цирка Монти Пайтона»).
Today, I can safely say that Python has changed my life.
Сегодня я могу смело сказать, что Python изменил мою жизнь.
I have moved to a different continent.
Я переехал на другой континент.
I spend my working days developing large systems in Python, when I'm not hacking on Python or answering Python-related email.
Я провожу свои рабочие дни, разрабатывая огромную систему в Python, когда не занимаюсь хакингом на Python или отвечаю на email, связанный с Python.
There are Python T-shirts, workshops, mailing lists, a newsgroup, and now a book.
Python-футболки, семинары, почтовая рассылка, группа новостей, а теперь и книга.
Frankly, my only unfulfilled wish is to have my picture on the front page of the New York Times.
Откровенно говоря, единственное мое неудовлетворенное желание - быть на обложке “New York Times”.
But before I get carried away daydreaming, here are a few tidbits from Python's past.
Но прежде чем увлечься мечтами, несколько лакомых кусочков из прошлого Python.
It all started with ABC, a wonderful teaching language that I had helped create in the early eighties.
Все началось с АВС - прекрасного обучающего языка программирования, который я помог создать в начале 1980-х годов.
It was an incredibly elegant and powerful language, aimed at non-professional programmers.
Это был невероятно элегантный и мощный язык, рассчитанный на непрофессиональных программистов.
Despite all its elegance and power and the availability of a free implementation, ABC never became popular in the Unix/C world.
Несмотря на всю его элегантность и силу, а также доступность бесплатной реализации, АВС так и не стал популярным в мире Unix/C.
I can only speculate about the reasons, but here's a likely one: the difficulty of adding new "primitive" operations to ABC.
Могу только догадываться о причинах, но есть по крайней мере одна: трудность добавления новых «примитивных» операций к АВС.
It was a monolithic, "closed system", with only the most basic I/O operations: read a string from the console, write a string to the console.
Этот была единая, «закрытая система», только с основными операциями ввода/вывода (I/O): чтения строк из консоли, написание строк в консоль.
I decided not repeat this mistake in Python.
Я решил не повторять эту ошибку в Python.
Besides this intention, I had a number of other ideas for improvement over ABC, and was eager to try them out.
Кроме этого намерения, у меня были другие идеи улучшений АВС , и большое желание их опробовать.
For instance, ABC's powerful data types turned out to be less efficient than we hoped.
Например, мощные типы данных АВС оказались менее эффективны, чем мы ожидали.
There was too much emphasis on theoretically optimal algorithms, and not enough tuning for common cases.
Слишком большой акцент был на теоретически оптимальных алгоритмах, и не достаточно настроек для общих случаев.
I also felt that some of ABC's features, aimed at novice programmers, were less desirable for the (then!) intended audience of experienced Unix/C programmers.
Я чувствовал также, что некоторые особенности АВС, рассчитанные на новичков, были менее желательны для (тогда!) предполагаемой аудитории опытных Unix/С программистов.
For instance: ABC's ideosyncratic syntax (all uppercase keywords!); some terminology (e.g. "how-to" instead of "procedure"); and the integrated structured editor, which its users almost universally hated.
Например, своеобразный синтаксис АВС (все ключевые слова - в верхнем регистре!); терминология (в том числе «how-to» вместо «procedure»); интегрированный структурированный редактор, почти повсеместно ненавидимый пользователями.
Python would rely more on the Unix infrastructure and conventions, without being Unix-bound.
Python в большей степени полагался на Unix-инфраструктуру и условные обозначения, без привязки к Unix при этом.
And in fact, the first implementation was done on a Mac.
И по сути, первое исполнение было сделано на Mac.
As it turned out, Python is remarkably free from many of the hang-ups of conventional programming languages.
Как оказалось, Python замечательным образом свободен от многих недостатков обычных языков программирования.
This is perhaps due to my choice of examples: besides ABC, my main influence was Modula-3.
Это, возможно, связано с выбором примеров: помимо АВС на меня сильно повлиял Modula-3.
This is another language with remarkable elegance and power, designed by a small, strong-willed team (most of whom I had met during a summer internship at DEC's Systems Research Center in Palo Alto).
Это ещё один язык удивительной элегантности и мощи, разработанный маленькой сильной духом командой (большую часть ребят я встречал во время летней стажировки в Центре Исследования Систем [фирмы] DEC (DEC’s System Research Center) в Пало Альто (Palo Alto)).
Imagine what Python would have looked like if I had modelled it after the Unix shell and C instead! (Yes, I borrowed from C too, but only its least controversial features, in my desire to please the Unix/C audience.)
Представьте себе, как выглядел бы Python, если бы я смоделировал его по образцу оболочки Unix и C! (Да, я заимствовал и у С, желая угодить аудитории Unix/C, но только его наименее спорные черты).
—————-
Any individual creation has its ideosyncracies, and occasionally its creator has to justify these.
Любое индивидуальное творение своеобразно, и иногда его создателю приходится оправдывать его.
Perhaps Python's most controversial feature is its use of indentation for statement grouping, which derives directly from ABC.
Возможно, самая спорная особенность Python - использование отступов для группировки операторов, которое унаследовано непосредственно от ABC.
It is one of the language's features that is dearest to my heart.
Это одна из языковых особенностей, которая дорога моему сердцу.
It makes Python code more readable in two ways. First, the use of indentation reduces visual clutter and makes programs shorter, thus reducing the attention span needed to take in a basic unit of code.
Это делает Python-код более читабельным двумя способами. Во-первых, использование отступов уменьшает визуальный беспорядок и делает программы короче, уменьшая тем самым объем внимания, необходимый для восприятия основных единиц кода.
Second, it allows the programmer less freedom in formatting, thereby enabling a more uniform style, which makes it easier to read someone else's code.
Во-вторых, это предоставляет программисту меньше свободы в форматировании, тем самым обеспечивая более единый стиль, что облегчает чтение чужого кода.
(Compare, for instance, the three or four different conventions for the placement of braces in C, each with strong proponents.)
(Сравните, например, три или четыре различных соглашения для размещения скобок в C, каждая из которых имеет сильных сторонников.)
This emphasis on readability is no accident.
Этот акцент на читабельности не случаен.
As an object-oriented language, Python aims to encourage the creation of reusable code.
В качестве языка объектно-ориентированного Python стремится поощрять создание многократно используемого кода.
Even if we all wrote perfect documentation all of the time, code can hardly be considered reusable if it's not readable.
Даже если бы мы все постоянно писали идеальную документацию, код вряд ли можно считать пригодным для повторного использования, если он не читается.
Many of Python's features, in addition to its use of indentation, conspire to make Python code highly readable.
Многие особенности Python, в купе с использованием отступов, призваны сделать Python-код хорошо читаемым.
This reflects the philosophy of ABC, which was intended to teach programming in its purest form, and therefore placed a high value on clarity.
Это отражает философию АВС, которая была предназначена для обучения программированию в ее чистейшей форме и поэтому придавала большое значение ясности.
Readability is often enhanced by reducing unnecessary variability.
Часто читабельность достигается за счет сокращения ненужной вариативности.
When possible, there's a single, obvious way to code a particular construct.
Когда это возможно, существует единственный, очевидный способ закодировать определенную конструкцию.
This reduces the number of choices facing the programmer who is writing the code, and increases the chance that will appear familiar to a second programmer reading it.
Это снижает число вариантов выбора, с которыми сталкивается программист, пишущий код, и увеличивает шансы на то, что он покажется знакомым второму программисту, читающему его.
Yet another contribution to Python's readability is the choice to use punctuation mostly in a conservative, conventional manner.
Другой вклад в читабельность Python - это выбор использования пунктуации чаще в консервативной, традиционной манере.
Most operator symbols are familiar to anyone with even a vague recollection of high school math, and no new meanings have to be learned for comic strip curse characters like @&$!.
Большинство символов операторов знакомы каждому, кто хотя бы смутно помнит математику в средней школе, и не нужно заучивать новые значения для таких обзываемых символов из комиксов, как @&$!
I will gladly admit that Python is not the fastest running scripting language. It is a good runner-up though.
Я охотно признаю, что Python не самый быстродействующий скриптовый язык. Однако он занимает достойное место.
With ever-increasing hardware speed, the accumulated running time of a program during its lifetime is often negligible compared to the programmer time needed to write and debug it.
При постоянно растущем быстродействии аппаратуры накопленное время работы программы в течение ее жизни часто оказывается ничтожно малым по сравнению с временем, необходимым программисту для ее написания и отладки.
This, of course, is where the real savings can be made. While this is hard to assess objectively, Python is considered a winner in coding time by most who have tried it.
Конечно, именно здесь можно добиться реальной экономии. Хотя это трудно оценить объективно, большинство опробовавших Python считают его победителем по времени кодирования.
In addition, many consider using Python a pleasure -- a better recommendation is hard to imagine.
К тому же, многие считают использование Python удовольствием - лучшей рекомендации сложно представить.
I am solely responsible for Python's strengths and shortcomings, even when some of the code has been written by others.
Я полностью ответственен за достоинства и недостатки Python, даже когда часть кода написана другими.
However, its success is the product of a community, starting with the early adopters who picked it up when I first published Python on the net, and who spread the word about it in their own environment.
Однако его успех - это результат работы сообщества, начиная с ранних приверженцев, которые подхватили его, когда я впервые опубликовал Python в сети, и которые распространили информацию о нём в своём окружении.
They sent me their praise, criticism, feature requests, code contributions, and personal revelations via email.
Они присылали мне по электронной почте свои похвалы, критику, пожелания о возможностях, вклад в код и личные откровения.
They were willing to discuss every aspect of Python in the mailing list that I soon set up, and educate me or nudge me in the right direction where my initial intuition failed me.
Они хотели обсуждать каждый аспект Python в рассылке, которую вскоре создал, и обучить или подтолкнуть меня в правильном направлении там , где моя первоначальная интуиция меня подвела.
There have been too many contributors to thank individually. I'll make one exception, however: this book's author was one of Python's early adopters and evangelists.
Слишком много было тех, кто вносил вклад, для того чтобы поблагодарить индивидуально. Однако, сделаю одно исключение: автор этой книги был одним из ранних приверженцев и евангелистов Python.
With its publication, his longstanding wish (and mine!) of having a more accessible description of Python than the standard set of manuals, is fulfilled.
С этой публикации исполнилось его давнее желание (и моё!) иметь более доступное описание Python, чем стандартный набор руководств.
But enough rambling. I highly recommend this book to anyone interested in learning Python, whether for personal improvement or as a career enhancement.
Но хватит болтовни. Я очень рекомендую эту книгу каждому, кто заинтересован, будь то для личного совершенствования или для карьерных улучшений.
Take it away, Eric, the orchestra leader! (If you don't understand this last sentence, you haven't watched enough Monty Python reruns.)
Убери это, Эрик, командир оркестра! (Если ты не понимаешь последние предложение, ты посмотрел не достаточно повторов Монти Пайтон).
Guido van Rossum
Reston, VA, May 1996

Гвидо ван Россум
Рестон, Вирджиния, май 1996
11 просмотров·5 поделились

