
Краткая история автоматизации тестирования
		   Развитие автотестов
	I. Утилиты записи/воспроизведения
		• специальная программа записывает действия за тестировщиком и воспроизводит их;
		• крайне ненадёжный инструмент;
		• нет возможности масштабирования;
		• в настоящее время не встречается.
	
	II. Написание сценариев тестировщиком
		• тесты пишут программисты;
		• появляется отдельная роль автоматизатора;
		• тестировщики запускают тесты и только;
		• длительные, долгие тесты;
		• C# Galio, UI;
		• дорогостоящая и трудоёмкая поддержка;
		• в настоящее время не встречается
		
	III. Управление тестовыми данными
		• Data Driven Testing;
		• Использование ООП;
		• Использование Page Object;
		• Python, Java;
		• Данные - отдельно, тесты - отдельно;
		• данные хранятся в БД / в csv-файлах
	
	IV. Тестирование по ключевым словам
		• Keyword Driven Testing;
		• BDD (Behaviour Driven Development);
		• простота поддержки
	
Эволюция использования автотестов
	<технологические изменения и их доступность>
	
	* на усмотрение тестировщика (сейчас не встречается);
	* перед релизом;
	* регулярные запуски (Jenkins/Bamboo)
	* CI/CD (Agile)
	
Устойчивость автотестов
	Самое популярное ожидание: тесты падают только тогда, когда выявили баг
	UI-тесты нестабильны

ATDD (Acceptance test-driven development)
	 Разработка через приёмочное тестирование.
	 Тесты и требования становятся неразличимыми: ТЕСТЫ ↔ ТРЕБОВАНИЯ
	 
BDD - разработка через поведение.
	  Проектирование через поведение (TDD - через тесты, чаще Unit)
Spec By Example - спецификация на примерах.

Robot Framework
