Подготовка тестового окружения
► Тестовое окружение;
► Python-пакеты;
► deb-пакеты;
► Рефлексия

Зачем это нужно уметь?
1. Настраивать тестовое окружение;
2. Решать ряд проблем с Linux-окружением.

[00:04:57]	Тестовое окружение
			- аппаратное и программное обеспечение и другие средства, необходимые для выполнения тестов.
	• Docker container (Docker Compose)
	• Virtual Machine
	• Физический сервер
	• Комбинации
	
[00:08:33]	Исходный код тестов
	Где хранить исходный код тестов
		• вместе с продуктом;
		• отдельно от продукта;
		• тесты разных уровней (приёмочные, интеграционные) - вместе/отдельно от продукта?
	
	Какой язык использовать для разработки тестов?
		• такой же, как язык разработки (не всегда осуществимо);
		• более удобный в зависимости от инструментария

[00:13:08]	Где запускать тесты?
	
	• Локально
	• Билд-агенты
	• Изолированные окружения (контейнеры, виртуальные машины)
	
[00:14:55]	Python-пакеты
	PyPI (Python Package Index) - репозиторий, содержащий пакеты, которые разрабатываются Python community
	
	pip - пакетный менеджер для Python, который позволяет устанавливать пакеты,
		  которые не входят в стандартную библиотеку Python.
	
	Установка (синтаксис команд)
	
	$ python3 -m pip install requests			# будет установлена последняя версия пакета requests
												# флаг -m == указание на модуль python
	$ python3 -m pip install requests==2.24.0	# будет установлена конкретная версия (2.24.0) пакета requests
	$ python3 -m pip install -i https://custom-pypi.org/simple my_pkg
	$ python3 -m pip install git+https://github.com/psf/requests.git#egg=requests
	
[00:19:30]	Пример из практики
[00:24:22]	Формирование пакетов
	
	Настроить вызов интерпретатора python 3.X вместо python 2.7 по команде: $ python
	позволяет утилита alternatives
	(https://linux.die.net/man/8/alternatives)
	
	alternatives — cистема для управления альтернативами программ в Debian GNU/Linux.
				   С её помощью удобно установить программу по умолчанию для выполнения какого-то действия.
	
	# Посмотреть возможные альтернативы:
	$ sudo update-alternatives --list <x-terminal-emulator>		# <интересующая_программа>
	
	# Пример, как установить новую альтернативу 
	$ sudo update-alternatives --set x-terminal-emulator /usr/bin/uxterm

	Distribution
	Source distribution - формат распространения пакетов, включающий метаданные и исходные файлы,
						  которые используются при установке пакета с помощью pip или генерации built distribution
						  
	Built distribution - формат распространения пакетов, включающий метаданные и файлы, которые необходимо поместить 
						 в определённое место в системе для корректной установки пакета.
	
[00:29:30]	Распаковка tar.gz-архива с пакетом  (=source distribution) + расшифровка метаинформации
[00:32:28]	setup.py. Что такое и зачем нужен.
		→ собирает всю необходимую информацию (метаинформация, какие_модули_добавить_в_пакет, версия, ...) и формирует пакет
		Модуль setuptools (import setuptools)	- собирает пакет на основе переданных параметров
	
	classifiers = [...]		# когда мы относим наш пакет к чему-либо.
	По умолчанию корневой директорией (root) считается директория, в которой расположен setup.py
	
	Некоторые параметры setuptools.setup():
	name="",
	version="0.0.1",
	author="",
	author_email="@gmail.com",
	description="",
	long_description= with open("README.md", "r", encoding="utf-8") as fh: long_description = fh.read(),
	packages = setuptools.find_packages(),				# функция анализирует в директории скрипта наличие packages
	# packages = setuptools.find_packages(where="src")	# package = директорий с файлами скриптов .py + файл __init__.py 
	classifiers = [
		"Programming Language :: Python :: 3",
		"License :: OSI Approved :: MIT License",
		"Operating System :: OS Independent"	
	]
	python_requires = ">=3.6"		- ограничение версии интерпретатора (не ниже 3.6)
	install_requires = ['зависимости от пакетов']		# при установке этого пакета сначала будут проверены/установлены зависимости
	dependency_links = ['ссылки', 'https://github.com/user/...']
	
	Директорий src, содержащий несколько поддиректориев
	
[00:46:40]	Практика. Пробуем собрать свой Python-пакет
	Source distribution
	source distribution - архив с исходными файлами, который используется для самостоятельной установки с помощью pip,
						  либо для сборки wheel.
	Представляет из себя tar.gz-архив
	$ tar -tf six-1.15.0.tar.gz			# Посмотреть содержимое архива
	
	Сборка:
	$ python3 setup.py sdist
	
	Установка:
	$ python3 -m pip install six-1.15.0.tar.gz
	
	** $ python3 setup.py --help-commands		# показывает возможные команды
	
	$ python3 setup.py sdist
		→ генерируется метаинформация
		→ запись и сбор файлов, которые присутствуют в пакете:
			► добавляется README.md
			► добавляется setup.py
			► добавляются модули (включающие __init__.py)
			► добавляется дополнительная метаинформация
	setup.cfg - способ организации информации для пакета
	(Переходят на использование setup.cfg при формировании пакета)
	
	► В виртуальных окружениях есть баг: 
	  в списке пакетов (pip --list) есть пакет pkg-resources 0.0.0 ◄
	
[00:57:50]	Для чего ещё нужны Source distribution	
	Помимо модулей Python у source distribution могут быть файлы расширений
	Когда код на Python работает, но некоторые элементы "тормозят".
	Тогда можно заменить эти элементы на специальные скомпилированные расширения или бинарники
	Т.о. в Source distribution могут храниться скомпилированные расширения

[01:02:50]
	Wheels
	wheels - формат пакета. созданный для распространения модулей и скомпилированных расширений
	Представляет собой zip-архив
	$ unzip -l six-1.15.0-py2.py3-none-any.whl
	Сборка:
	$ python3 setup.py bdist_wheel
	
	Установка:
	$ python3 -m pip install six-1.15.0-py2.py3-none-any.whl
	
	Пример:
		Пакет multidict содержит помимо метаданных и скриптов .py
		файлы с расширением .c (нужно компилировать) и .so = скомпилированная библиотека, ускоряющая выполнение
		функции (_multidict.cpython-37m-x86_64-linux-gnu.so)
	
[01:08:45]	Именование wheels
	
	six-1.15.0-py2.py3-none-any.whl
	• six - имя пакета
	• 1.15.0 - версия пакета
	• py2.py3 - Python tag, поддержка Python 2 и Python 3
	• none - ABI tag		# (~API), Application Binary Interface, где находятся элементы, как передавать в функцию данные 
	• any - поддерживаются любые платформы
	
	pure-Python wheel - Jinja2-3.0.0a1-py3-none-any.whl			# пакет поддерживает Python 3
	universal wheel - 	# поддерживает Python 2 Python 3
	platform wheel - numpy-1.18.4-cp38-cp38-win32.whl
	

[01:12:31]	Семантическое версионирование	{см. лекцию.pdf}
	
	1.15.0
	1 - "Major" номер версии. Увеличивается, когда API библиотеки или приложения
		 меняется обратно несовместимым образом;
	15 - "Minor" номер версии. Увеличивается, когда в API добавляются новые функции
		 без нарушения обратной совместимости. При увеличении Major принято сбрасывать Minor в 0 [+ Improvements]
	0 - "Patch" [+ Bugfixes]

[01:16:10]	wheels vs source distribution	{см. лекцию.pdf}

[01:19:46]	Публикация Python package {см. лекцию.pdf}

	pip install check-wheel-contents
	Сборка пакета:
	$ python3 setup.py sdist bdist_wheel
	
	Для сборки пакетов, содержащих в себе скомпилированное разрешение, нужен пакет wheel
	[$ pip install wheel]
	$ check-wheel-contents dist/<pkg_name.whl>
	
	twine - загрузка пакета на PyPI
	pip install twine
	
[01:32:11]	deb-пакеты
	
	Пакет - архивный файл, содержащий исполняемый двоичный файл, файл конфигурации и иногда информацию о зависимостях.
	Представляет собой ar-архив (= упаковывает, но не сжимает)
	
	Менеджер пакетов позволяет устанавливать, удалять или обновлять любой пакет или группы пакетов,
	выполняя автоматически все необходимые для этого процедуры (доставку пакетов из удалённых репозиториев,
	вычисление зависимостей и установку требуемых по ним пакетов, удаление замещаемых пакетов и т.п.)
	
	• Yum, RPM - Red Hat (Fedora, RHEL, openSUSE)
	• dpkg - Debian (Ubuntu)
	• packman - Arch Linux
	• brew - OSX
	
	Сборка deb-пакетов:
	fpm - инструмент, который позволяет собирать пакеты для различных систем
	
	$ sudo apt-get update
	$ sudo apt-get install ruby-dev build-essential
	$ sudo gem install fpm
	
	Сборка python-пакета
	$ fpm -s python -t deb setup.py
	
[01:36:50]	Добавление в PATH
		
	Не всегда нужно устанавливать пакеты, иногда достаточно поместить исполняемый файл в директорий,
	который указан в PATH
	
	$ echo $PATH
	
	$sudo curl -L
	https://hithub.com/docker/compose/releases/download/1.27.4/docker-compose
	-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose
	
	$ ls -lahi /usr/local/bin/docker-compose
	$ sudo chmod +x /usr/local/bin/docker-compose
	$ docker-compose --version
	