Работа с ОС Linux с помощью Python

Модули стандартной библиотеки Python:
	• subprocess
	• os
	• sys

[00:03:30]	Модуль subprocess
			subprocess предоставляет API для поддержки работы с процессами
	Что можно делать с помощью subprocess:
		• создавать новые процессы
		• получать доступ к STDIN/STDOUT/STDERR процессов
		• получать коды возврата
		
	Интерфейс
		• run
		• call, check_call, check_output
		• Popen			# Объект класса, представляет собой запущенный процесс
						# Более низкоуровневый инструмент работы
	
	subprocess.run(args, *,					# запускаемая программа с аргументами 
					stdin=None,				# поток данных, отправляемых в процесс
					input=None,				# поток данных, отправляемых в процесс
					stdout=None,			# поток вывода программы
					stderr=None,			# поток ошибок программы
					capture_output=False,	# захват вывода stdout и stderr
					shell=False,...,		# вызов посредника - процесс командной оболочки sh
					cwd=None				# путь к рабочему каталогу запускаемой программы
					timeout=None			# максимально допустимое время выполнения запущенной программы
					text=None				# текстовый режим для stdin, stdout, stderr
					**other_popen_kwargs)	#
							
	subprocess.run - высокоуровневый интерфейс для выполнения процесса с возможностью захвата его вывода
	
	* Запускает команду, указанную в args
	* Ожидает окончания выполнения команды
	* Возвращает экземпляр класса CompletedProcess (результат выполнения процесса)
	
[00:09:40]	Пример
{ЗАПУСК ПРОЦЕССА В ФОНОВОМ РЕЖИМЕ: поставить после команды &}
	
	from subprocess import (
		run, PIPE
	)
	
	def run_example():
		result = run(["ls", "-l"])		# Передаём команду и параметр в виде списка
		print(result)
		print(result.stdout)
		print(result.stderr)
	
	Пояснение: result.stdout = None, result.stderr = None

	pstree -p <PID>	- дерево процессов
	
	lsof -p <PID> - посмотреть, какие ресурсы задействуются процессом (какие файлы процесс открывает)
	
	При запуске скрипта через терминал запускается 2 процесса:
		• родительский (python3)				И
		• процесс-потомок (ls -l или sleep)
		
	# pstree -p 26		# 26 - PID процесса python3
	python3(26)---sleep(27)
	lsof -p 27
	→	Три стандартных потока (0,1,2) связаны с терминалом (консолью). Любые записи будут переданы в sleep
	lsof -p 26
	→ процесс-родитель также связывает свои стандартные потоки (STDIN/STDOUT/STDERR) с терминалом
	
	Как можно получить значения стандартных потоков?
	Поскольку стандартные потоки процесса-потомка и родительского процесса связаны с терминалом, 
	мы (процесс-родитель) не можем получить значения стандартных потоков потомка
	
	def capture_err_and_out():
		result = run(["ls", "-l"], stderr=PIPE, stdout=PIPE)	
		print(result.stdout)								# выведет b''
		print(result.stderr)								# выведет неформатированный результат выполнения команды
		
	STDOUT и STDERR передаются сейчас в pipe (с разными INODE)
	Процесс-потомок передаёт в pipe (FD: 1w, 2w) вывод STDOUT и STDERR,
	а процесс-родитель считывает из pipe (FD: 3r, 5r) данные вывода.
	Процесс-потомок ► Процесс-родитель
	
	Можем перенаправить stdout или stderr в subprocess.DEVNULL (аналог /dev/null)
	Можно заменить stderr=PIPE, stdout=PIPE на параметр capture_output=True

[00:23:42]	Параметр check=True
		Если команда возвращает exit_code = 0, ничего не произойдёт;
		Если код возврата программы ненулевой, метод run(['command'], check=True) вызовет CalledProcessError
		Можно таким образом ловить исключения в запускаемых процессах.
[00:25:03]	Тайм-аут (timeout)
		Временные рамки, которые считаются допустимыми для выполняемой программы/утилиты
		
[00:26:35]	shell
		Полезно, когда требуется запустить из скрипта Python что-то похожее на команду BASH
	Пример:
		run(["echo", "$HOME"])			# Не развернётся, выведет $HOME
		run(["echo $HOME"], shell=True)	# Развернёт в терминале переменную окружения $HOME [= путь до домашней директории]
										#(аналогично bash-команде echo $HOME)
		run(["echo $HOME | wc -c"], shell=True)		# Используем pipe для перенаправления вывода команды на ввод команде wc -c
	
	Как выполняется команда с параметром shell=True:
		Родительский процесс python3 вызывает процесс командной оболочки shell,
		которая в свою очередь запускает субпроцесс, описанный в скрипте:
	
	python3(42)---sh(43)---sleep(44)
	
[00:31:08]	Older high-level API
	• subprocess.call - возвращает атрибут return_code
		run(...).returncode		# Analog
		
	• subprocess.check_call - если return code не равен 0, бросается исключение CalledProcessError
		(содержит значение return code в атрибуте returncode)
		run(..., check=True)		# Analog
		
	• subprocess.check_output - возвращает output запущенной команды, если return code не равен 0 -
		бросается исключение CalledProcessError
		run(..., check=True, stdout=PIPE).stdout

	Пример:
	
	def check_output_str_to_stdin():
		# Pass a string to the subprocess's stdin
		result = check_output(["sed", "-e", "s/foo/bar"],			# sed s (substitude) - заменить часть символов (слово)
							   input=b"when in the course of fooman events")
		print(f'stdout: {result}')
	
[00:38:40]	subprocess.Popen
			выполняет программу в новом процессе
	• запускает команду, указанную в args
	• не блокирует выполнение скрипта
	[Запущенная программа/команда выполняется самостоятельно, независимо от python3]
	Popen.poll - проверяет, завершился ли child-процесс
	Popen.wait - ожидает завершения child-процесса
	Popen.communicate - посылает данные в stdin child-процесса
	Popen.send_signal - посылает signal child-процессу
	Popen.terminate - посылает SIGTERM child-процессу
	Popen.kill - посылает SIGKILL child-процессу

[00:45:25]	Модуль sys
		sys содержит атрибуты и функции, которые обеспечивают доступ к конфигурационным параметрам интерпретатора
	sys.version - информация о версии интерпретатора
	sys.platform - информация о платформе операционной системы,использованной для сборки интерпретатора
	sys.argv - аргументы командной строки, переданные в скрипт
	sys.executable - абсолютный путь до исполняемого файла интерпретатора
	sys.exit - завершение выполнения скрипта с переданным кодом
		Используется исключение SystemExit
		В качестве параметра можно передать integer, который будет представлять собой код завершения.
	
	sys.path - список путей, по которым интерпретатор производит поиск модулей
	Инициализируется из переменной PYTHONPATH
	(Внутри PYTHONPATH содержится список путей, по которым интерпретатор ищет модули)
	Данный список можно изменять в процессе выполнения скрипта
	Пример добавления модуля в окружение PYTHONPATH:
		import sys
		import pprint
		
		pprint.pprint(f'Default paths: {sys.path}')
		try:
			from module_1 import name
		except ModuleNotFoundError as e:
			print(e)
		sys.path.append('/Users/max/OTUS/pyhon_linux/pack')		# Добавляем в окружение путь до модуля
		pprint.pprint(f'Updated paths: {sys.path}')
		from module_1 import name
		print(name())
	
[00:56:13]	Работа со стандартными потоками ввода/вывода/ошибок
		sys.stdin, sys.stdout, sys.stderr
	sys.stdin - используется для интерактивного ввода (в том числе input())
	sys.stdout - используется для вывода print()		# по умолчанию выводится на экран в консоль
	sys.stderr - вывод ошибок интерпретатора
	
	Пример аналогичен тому, который разобран в книге:
	"Python 3. Самое необходимое":: гл. 16.8 Перенаправление ввода/вывода, с. 313
	Суть:
	1. Сохраняем значение по умолчанию sys.stdout в переменной
	2. Меняем значение sys.stdout:
		with open('stdout.txt', 'w') as f:
			sys.stdout = f
			print(f"foo bar some text {val}")	записывается в файл
	3. Меняем значение sys.stdout на изначальное
	Это один из выриантов MonkeyPatching-а, когда мы временно меняем поведение какой-то функции
	
	Может пригодиться, когда используем pytest xdist для дебага
	
	Можно также перенаправить поток stdin, чтобы печатать в консоль строки из назначенного файла
	
[01:05:30]	Модуль os
		os позволяет получить доступ к средствам, специфическим для операционных систем
		Модуль состоит в основном из функций, предназначенных для управления процессами и содержимым 
		файловой системы (файлами и каталогами)
		
	os.name - имя платформы
	os.environ - переменные окружения
	os.getcwd() - текущий рабочий директорий
	os.lostdir() - список файлов в директории		# аналог ls в shell
	
	os.stat - информация о файле или файловом дескрипторе
	Использует системный вызов stat()
	В качестве параметра можно передать путь до файла или файловый дескриптор
	
	Пример:
	
		stat_info = os.stat(filename, follow_symlinks=False)		# Если мы вызываем os.stat() для файла, являющегося 
																	# symlink (символьной ссылкой: жёсткой или симлинк)
																	# то мы получим инфо именно об этой символической ссылке,
																	# а не о файле, на который она ссылается
	Атрибуты, которые мы можем получить из os.stat():
	• f'os.stat({filename})'			- имя файла
	• stat_info.st_size					- размер файла
	• {oct(stat_info.st_mode)}			- Permissions (премиссии) - восьмиричное представление прав доступа (rwx)
	• {stat_info.st_uid}				- владелец (owner) - UID
	• {time.ctime(stat_info.st_ctime)}	- время создания
	• {time.ctime(stat_info.st_mtime)}	- время последнего изменения
	• {time.ctime(stat_info.st_atime)}	- время последнего доступа (открытия)
	
	os.chmod - измеенние прав доступа к файлу
	В качестве параметра можно передать путь до файла или файловый дескриптор
	
	os.access - проверка прав доступа процесса к файлу
	Использует системный вызов access()
	В качестве параметра mode можно передавать:
		• os.F_OK - для проверки существования файла
		• os.R_OK, os.W_OK, os.X_OK - для проверки соответствующей пермиссии
		
		stat.S_IXUSR - поставить пермиссию для текущего пользователя
		new_permissions = permissions | stat.S_IXUSR	# Установить пермиссию на исполнение
		new_permissions = permissions ^ stat.S_IXUSR	# Убрать пермиссию на исполнение
		
		# | - логическое "ИЛИ"
		# ^ - логическое "ИСКЛЮЧАЮЩЕЕ ИЛИ"
		
[01:19:53]	os.mkdir, os.rmdir
		os.mkdir - создаёт новый директорий при условии, что все родительские директории уже существуют		#аналог mkdir в sh
		os.makedirs - создаёт все части пути, которые до этого не существовали								# аналог mkdir -p
		os.rmdir - удаляет директорий (фактически удаляется директорий, соответствующий последней части пути)
		os.removedirs - удаляет все родительские директории при условии, что они пусты
		
		os.path.join - "склеить" пути к файлу
		os.unlink(filename) - удаление файла из скрипта python3		# аналог rm
		
		os.symlink - создание символической ссылки
		os.readlink - чтение ссылки и определения исходного файла, на который указывает ссылка
		os.lstat - то же самое, что os.stat, но без резолва symlink		# т.е. то же самое, что follow_symlinks=False
		
		Фреймворк Plumbum
		