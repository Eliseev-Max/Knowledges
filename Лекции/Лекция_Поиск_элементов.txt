Поиск элементов

DOM (Document object model) - древовидная структура
DOM-Tree (DOM-дерево)
Selenium не взаимодействует с теми элементами, с которыми не может взаимодействовать пользователь
(невидимые элементы).

[10:30] Как найти элемент/проверить его существование
	1. Методы, встроенные в объект document
		document.getElementById.
				.getElementByClassName	# по имени класса (class = "margins")
				.getElementByName
				.getElementByTagName
	Структура наследования:
	Object ► 
			EventTarget ►
						 Node ►
							   Element ► 
										HTMLElement ►
													 HTMLDivElement ►
																	 div.margins
	Каждый элемент - уникальный объект на странице.
	
[17:23] Библиотека JQuery

	Причина популярности этой библиотеки: решение проблемы с использованием разных браузеров
	JQuery предоставляла API для пользователя, т.о. формат написания кода для любого браузера
	был один, а сама библиотека транслировала всё под конкретный браузер.
		
		$ $$ and
		$x - поиск по XPATH ($x("/body"))
	JQuery-селектор: $(".class_name")	-> Получить все элементы с заданным селектором
	
[23:13]	browser assistance selectors

	в HTML-коде страницы найти элемент -► ПКМ -► Copy -►CSS Selector
	Пользоваться им НЕ НАДО, не практично. Малейшие изменения в коде приведут к отказу
	
[26:30] Локаторы и селекторы. Локаторы Selenium

	Отличие между локаторами и селекторами:
	Локатор - это то, КАК мы будем искать элемент (find_element_by_LOCATOR). Это метод, принимающий строку.
	Селектор - это то, что мы будем искать.
	
	https://stackoverflow.com/questions/13261435/what-is-the-difference-between-locator-and-selector
	
	from selenium import webdriver
	chrome = webdriver.Chrome()
	chrome.find_element_by_id("myModal")		# Спец.символы (# . <>) для поиска по id не пишем
												# Если ищем _by_css_selector, пишем символы id (#), class (.)
	Есть find_element (одиночный поиск), а есть find_elements (множественный поиск)
	Результат выполнения find_element - одиночный элемент (список из элементов) со своим id(element) и is сессии
	Результат выполнения find_elements - массив (список) []
	Если не удалось найти элемент:
	find_element -► возбудится исключение NoSuchElementException
	find_elements -► вернёт пустой список

[50:00]	Исключения при работе с элементами

	NoSuchElementException
	StaleElementReferenceException	- 	в случае, если страница была обновлена (refresh), и все связи порушились
										# для Selenium обновлённая страница = новая страница
	ElementNotInteractableException		элемент есть, но он нигде не представлен (скрыт)
	ElementClickInterceptedException	если кликаем в элемент, а он перекрыт другим элементом.
	InvalidSelectorException			неверное имя селектора
	
[1:02:00] Скандалы, интриги, расследования
	
	Методы поиска элементов:
	
	from selenium.webdriver.common.by import By
	
	find_element(by, selector)		# by == Локатор (стратегия поиска)
	find_elements(by, selector)
	
	Паттерн, приводящий множество функций от разных аргументов к функции от одного аргумента
	называется КАРРИРОВАНИЕ
	
	Метод By превращает поиск по ID, по имени, по классу и т.д в поиск ПО CSS СЕЛЕКТОРУ
	Нет смысла использовать поиск по TAG_NAME, CLASS_NAME, NAME, всё в итоге преобразуется в поиск по CSS_SELECTOR
	
[1:13:35] Как организовывать CSS селекторы
	Чтобы не писать каждый раз 
		browser.find_element(By.CSS_SELECTOR, "#admin")
		browser.find_element(By.NAME, "password")
		browser.find_element(By.CSS_SELECTOR, "button[type='submit']")
		и т.д.
	можно объединить в отдельный класс элементы для отдельно взятой страницы.
	
	class LoginAdminPage:
		USERNAME_INPUT = (By.CSS_SELECTOR, "#input-username")
		PASSWORD_INPUT = (By.NAME, "password")
		SUBMIT_BUTTON = (By.CSS_SELECTOR, "button[type='submit']")
		
	В итоге будет выглядеть так
	
		browser.find_element(*LoginAdminPage.USERNAME_INPUT)
		browser.find_element(*LoginAdminPage.PASSWORD_INPUT)
		browser.find_element(*LoginAdminPage.SUBMIT_BUTTON)
		
	Различные селекторы			→			CSS-селекторы (By.cssSelector)
	By.className("register")	→			".register"
	By.tagName("table")			→			"table"
	By.id("unique_id")			→			"#unique_id"
	By.name("login")			→			"[name=login]"
	By.xpath("//body/nav")		→			"body > nav"
	By.xpath("//body//nav")		→			"body nav"
	
	НО CSS в отличие от XPATH не умеет рекурсивный поиск
	
[1:26:49] Оптимизация фронтенда
	Так как фронтенд = набор текста, для удобства можно добавить в нужное место локатор
	Можно написать атрибут (name=)
	или <div data-marker="some_marker">