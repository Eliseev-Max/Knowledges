Введение в Docker и контейнеризацию

Возможность запуска тестов в изолированном окружении
Упрощённый запуск тестов в CI + развёртывание инфраструктуры

[00:05:09]	Обзор Docker

Docker - это открытая платформа для разработки, доставки и эксплуатации приложений.

Варианты использования:
• упаковка приложения (тестов) в контейнеры
• раздача и доставка контейнеров командам для разработки и тестирования
• деплой контейнеров в Production (хорошо масштабируется горизонтально)

[00:11:36]	Docker flow

Образ (image) - шаблон, который используется для создания контейнеров
Реестр (registry) - репозиторий образов (Docker Hub = hub.docker.com)
Dockerfile - текстовый файл с инструкциями, необходимыми для создания образа контейнера
Контейнер (container) - запущенное приложение, т.е. совокупность процессов и образа

	[Dockerfile] -► Build -► Image -► Run -► Container
	
[00:16:24]	Компоненты Docker
			Клиент (Client)
			Сервер (Server/Host) [Docker Daemon]
		
Реестры: публичные | приватные

[00:18:52]	Сравнение Docker-контейнеров и виртуальных машин (VM)
		  VM более изолированы,
		  Каждая VM использует свою ОС (Guest OS), свои библиотеки, файлы, службы
		  Всеми виртуальными ОС управляет Гипервизор (Hypervisor)
		  
		  Все контейнеры задействуют одно общее ядро ОС
		  Контейнеры пользуются общими библиотеками (не дублируя их)

[00:23:07]	Преимущества контейнеров
		   • Время запуска - контейнеры запускаются быстрее (несколько секунд), чем VM (несколько минут)
						  (запуск контейнера == запуск службы)
		   • Ресурсы - контейнеры потребляют меньше ресурсов, чем VM (HDD, RAM, CPU)
		   • Лицензирование - большинство технологий для запуска контейнеров бесплатны и являются Open Source проектами
		   • Переиспользование кода - образы легко создаются из Dockerfile и могут распространяться через реестры
		  
[00:25:17]	Преимущества виртуальных машин (VM)
			Изолированность - у VM более высокая степень изоляции друг от друга и от хостовой системы
			Портирование - возможность запуска VM с Linux на хосте Windows и наоборот
			Откат изменений (rollback) - удобная система Snapshots

[00:27:53]	Базовые команды Docker CLI
			Многие команды docker требуют привелегий суперпользователя
			Чтобы постоянно не прибегать к sudo docker..., нужно добавить своего пользователя в группу docker
			sudo usermod -aG имя_группы имя_пользователя
			
[00:30:06]	Проверка правильности установки
	docker --version	# выведем version ..., build ...
	запуск контейнера из образа hello-world:
		docker run hello-world
	При выполнении docker-команды из удалённого репозитория (библиотеки) скачивается образ
	hello-world последней версии.
	Запустившийся контейнер выводит сообщение о том, какие действия были выполнены Docker-клиентом
	и Docker-сервером (Docker Daemon) в консоль
	
	Шаги Docker:
	1. Docker клиент связался с Docker демоном
	2. Docker daemon вытащил (извлёк) образ из Docker Hub
	3. Docker daemon запустил новый контейнер из этого образа ► контейнер запустил исполняемый файл ►
	   ► вывел строку (которую мы прочитали)
	4. Docker daemon транслировал этот вывод клиенту, который в свою очередь отправил вывод в наш терминал
	
____________________________[00:34:20]____________________________

[00:34:38]	Базовые команды
	
	docker ps [-a, --all]		- выводит список контейнеров (без параметров: показывает запущенные контейнеры)
	docker images				- выводит список образов
	docker run [--rm] <image>	- создаёт и запускает новый контейнер
	docker run = docker create <image> + docker start <container-ID> [--attach, -a]
	docker run [-it, -d] <container-ID> {command}	- интерактивный режим
	docker exec [-it] <container-ID>	- выполнение команды внутри работающего контейнера
	
Dockerfile
# Устанавливаю базовый образ
FROM python:3.8-alpine

# Устанавливаю рабочую директорию внутри контейнера
# Директория будет создана, если её не было
# Будет в дальнейшем использоваться, как базовая
WORKDIR /app

# Копирую сначала зависимости
# Для того, чтобы не пересобирать их каждый раз при сборке
COPY requirements.txt .

# Выполняю необходимые команды
RUN pip install -U pip
RUN pip install -r requirements.txt

# Копирую остальные файлы проекта
COPY . .

# Этот параметр можно переопределить при СОЗДАНИИ контейнера, т.е. run
CMD ["pytest", "--browser", "chrome"]
	
[00::]