Построение отчётов с помощью фреймворка Allure

+ Удобная отчётность по тестам для разработчиков, QA и менеджмента
+ прозрачность процесса автоматизации тестирования (повышается понятность, человекочитаемость)

[00:04:00]	Обзор Allure
(http://allure.qatools.ru/ - сайт фреймворка)
	Allure - инструмент для построения понятных отчётов автотестов
	Создание отчёта состоит из двух этапов:
		• во время исполнения теста testing framework adapter собирает данные об исполнении
		  теста и сохраняет их в файлах
		• на основании данных, сохранённых в файлах, происходит генерация HTML-отчёта
		  с помощью command line tool, плагина для CI или build tool

	Thucydides - фреймворк, на базе которого был сделан Allure
		(Allure написан командой разработчиков Yandex)
		• Java-фреймворк (тесты можно писать только на Java)
		• Ориентирован на приёмочное тестирование web-приложений
		• Имеет монолитную архитектуру
	
[00:06:54]	Почему стоит использовать Allure
	
	• прозрачная отчётность не только для разработчиков и QA
	• возможность соотнести автотесты с тест-кейсами
	• понимание, какая именно функциональность покрыта тестами
	• минимум времени на разбор отчёта
	• интеграция с тестовыми фреймворками (pytest, TestNG и т.д.)
	• Поддержка CI (Jenkins, TeamCity)
	
[00:10:40]	Установка Allure

	Allure состоит из двух частей:
		• адаптер
		• генератор отчётов
	
	Адаптер - ПО, которое собирает данные о результатах выполнения тестовыми
	pytest plugin
	$ pip install allure-pytest
	[дополнительно устанавливается пакет allure-python-commons]
	
	Генератор отчётов - ПО, которое на основе данных, собранных адаптером, генерирует Allure-отчёт
	
	Устанавливается
		из пакета:
	$ sudo apt-add-repository ppa:qameta/allure
	$ sudo apt-get update
	$ sudo apt-get install allure
		из архива:
	https://github.com/allure-framework/allure2/releases
	ver. 2.14.0 - latest
	
	В файле pytest.ini передаётся дополнительный параметр:
		addopts = --alluredir allure-results
	Он указывает на тот директорий, куда будут сохраняться результаты, собранные адаптером, в формате JSON
	Как этим пользоваться:
		► можно добавить параметр явно в командной строке, в качестве параметра pytest
			pytest test_01_example.py --alluredir allure-results
			# создастся директория allure-results с JSON-файлами в количестве, равном количеству запущенных тестов.
		► чтобы Allure запускался при каждом запуске, нужно прописать эту опцию в файл pytest.ini
		
	Почему так происходит?
		По умолчанию параметр имеет значение None, поэтому необходимо добавлять
	
[00:16:30]	В JSON-файле содержится следующая информация:
				• "name":				имя теста (название тестовой функции)
				• "status": 			статус прохождения теста (Passed/Failed/Error)
				• "statusDetails":{}	детали, сообщение Exception и trace
				• "description": 		описание тестов (берётся из докстринги теста (""" Docstring """))
				• "start":  "stop":		timestamp, временные метки начала и окончания теста
				• [Идентификаторы]: "uuid", "historyId", "testCaseId"
					На основе "historyId" строятся тренды прохождения теста
				Прочие метки и т.д.
[00:18:44]	Какие опции есть в Allure
	
	allure --help	# Справочная информация
		Команды:
	generate	- Парсит полученные JSON-файлы и на их основе создаёт директорию, выстраивает структуру,
				  необходимую для формирования HTML-отчёта
				  (данные сохраняются локально в папке allure-report)
	serve		- поднимается встроенный веб-сервер для вывода отчёта (== generate + open)
					  данные сохраняются в папке tmp
	open		- открытие отчёта
	plugin		- список плагинов
	
	Пример выполнения команды
	$ allure generate -c && allure open		# опция -c для очистки директории с allure report

[00:22:50]	Структура отчётов
	Вкладки в Main Menu (боковом меню):
		Overview - общая информация о тестовом запуске
			SUITES 		- содержимое одного тестового модуля
			ENVIRONMENT - вспомогательный виджет, который можно добавить на страницу Overview,
						  подложив в директорию allure-results файл с описанием выводимой информации [*]
			FEATURES BY STORIES - виджет, связанный с BDD
			EXECUTORS	- машина, на которой выполнялись автотесты (например, Jenkins)
		Categories - категории дефектов тестов (в виде раскрывающихся списков);
					 по умолчанию доступны категории [**]:
						• Product defect (failed tests) [Failed by AssertionError]
						• Test defects (broken tests)
		Suites - стандартная группировка результатов тестов по suites и classes (имеет древовидную структуру)
		Graphs [♦] - статистика, например, диаграмма по статусам тестов, график длительности выполнения тестов и т.д.
					 Особенно наглядна и полезна при работе с Jenkins
				
		Timeline - диаграмма, показывающая распределение тестов в зависимости от длительности выполнения
		Behaviors - группировка результатов по тегам Epic, Feature и Story
		Packages - группировка результатов по package
	
	[**] Категории (Categories) можно пополнять и редактировать, внося изменения в файл categories.json
		Описание категории:
		{
			"name":"Ignored tests",
			"matchedStatuses": ["skipped"]
		}
		Можно добавить следующие опции в описание категории:
			"messageRegex": ".*YourMessage*."		# сообщение, выводимое при возникновении соответствующего Exception
			"traceRegex": ".*FileNotFoundError*."	# поиск Exception по выводимому Traceback
	
	[*]	Файл, описывающий структуру ENVIRONMENT, может быть
		• properties-файлом (environment.properties)
		• xml-файлом
		
		Как выглядит properties-файл:
			Browser=Chrome
			Browser.Version=88.0
			Stand=Production
		Как собирать информацию о рабочем окружении (environment)
			Автоматическое создание файла:
			► с помощью фикстуры:
			
		@pytest.fixture(scope="session")		# Данная фикстура будет выполнена до запуска всех тестов
		def get_environment(pytestconfig):		# pytestconfig - это фикстура, позволяющая получить доступ к конфигурации запуска pytest
			props = {							# создаём словарь
				'Shell': os.getenv('SHELL'),
				'Terminal': os.getenv('TERM'),
				'Stand': 'Production'
			}
			
			test_root = pytestconfig.rootdir	# rootdir - это корневой каталог allure, из которого производился запуск
			with open(f'{tests_root}/allure-results/environment.properties', 'w') as f:
				for k, v in props.items():
					f.write(f'{k}={v}\n')
		
		Автоматическое формирование файла environment.properties позволяет нам в каждом отчёте иметь актуальную информацию
		по браузеру, в котором запускаются тесты, его версии и типу стенда
		
	[♦]	Виджеты с диаграммами раздела Graphs:
		• STATUS - Кольцевая диаграмма статусов выполненных тестов:
					○ Failed
					○ Broken
					○ Passed
					○ Skipped
					○ Unknown	# не указан status, не распознано Allure
		• SEVERITY 		 - позволяет сразу оценить, какого уровня проблемы есть в билде
						  Каждый тест может помечаться уровнем критичности в зависимости от его важности (веса в проекте)
		• DURATION 		 - Распределение по длительности выполнения тестов (столбчатая диаграмма)
		DURATION TREND 	 - показывает общее время выполнения тестов (линейная диаграмма с площадями под линией до оси)
		RETRIES TREND 	 - тесты, которые в одном запуске работают, а в другом не работают (сколько было retries в данном билде)
		CATEGORIES TREND - распределение по категориям
		TREND 			 - тренд по статусам тестов

[00:38:25]	Вкладка Timeline
	
	Выглядит, как линия времени (горизонтальная, состоит из цветных прямоугольников)
	Можно оценить, какое время выполнялся тот или иной тест
	
[00:39:19]	Вкладка Packages
	
	
	
[]	Вкладка Behaviors
