Логирование, протоколирование и отчётность

#	Мэппинг, маппинг, маппирование - это определение соответствия информации между двумя разными семантиками как одного объекта,
#	так и нескольких. Иными словами, так называется преобразование данных из одной формы в другую.

[00:04:00]	Логирование
	- это способ сохранения информации о работе системы или программы.
	Как правило, логи (артефакты логирования) используются для анализа работы или поиска ошибок и неисправностей
	Однако, если возникает необходимость анализа сложной системы, или к коду которой прямо сейчас нет прямого доступа
	и анализировать необходимо в рантайме, то без логов никуда.
	
	Python предоставляет очень качественный модуль для логирование logging как часть стандартной библиотеки.

	Существует несколько уровней логирования
	Самый низкий (детальный) уровень логирования: debug
	
	https://docs.python.org/3/howto/logging.html - руководство по модулю
	
[00:09:35]	Построение качественной системы логирования - сложная задача
			1. Что именно писать в логи? (не избыточно и не недостаточно)
			2. Хранение логов (обеспечение доступности даже при отказе)
			3. Доступность логов
			4. Понятность и достаточность
			5. Соответствие архитектуре (прозрачность, понятность)
		
[00:13:50]	Пять основных уровней логирования:
			DEBUG	 - самый полный уровень, обычно используют при разработке или поиске проблем в системе
			INFO	 - любая информация, сообщающая о выполнении системой каких-либо операций или действий
			WARNING  - информация, цель которой - сообщить или предупредить пользователя о какой-то потенциальной проблеме
					  (место на диске подходит к концу)
			ERROR	 - серьёзная ошибка в системе, которая не позволяет ей выполнить одну из важных функций или операций
			CRITICAL - Ошибка, из-за которой система не может продолжать функционировать
			
[00:17:54]	Практические примеры. Модуль logging (модуль стандартной библтотеки)
	import logging
			logging. - это "очень прокаченный print"
	logging.debug('')
	logging.info('')
						[уровень логирования по умолчанию - WARNING]
						[по умолчанию выводятся логи начиная с warning]
	logging.warning('')
	logging.error('')
	logging.critical('')
	
	Изменить уровень логирования можно с помощью
		logging.basicConfig(level="DEBUG")
	Но лучше не хардкодить строки, а использовать константы модуля/библиотеки
		logging.basicConfig(level=logging.DEBUG)
		Атрибуты DEBUG, CRITICAL и пр. 
	!! Можно выключить logging, задав в параметре level слишком большое число
	Параметр filename:
		logging.basicConfig(level=logging.DEBUG, filename=None)		# Вывод в терминале
		logging.basicConfig(level=logging.DEBUG, filename=file.log)		# Вывод в файл file.log
	
	[Уровень логирования]:root:[Сообщение]		# root - это синглтон логгера, создаётся по дефолту
												  когда вызывается basicConfig
	ERROR:root:This is a error message
[00:27:49]	- Форматирование logging, основные трудности:
		logging.basicConfig(format='%(asctime)s %(message)s')
►	!!!ФОРМАТ вывода сообщений logging задаются ОДИН РАЗ В НАЧАЛЕ и потом не переопределяются
	
[00:31:48]	Как работают с логгером в развитых системах
		1. Для каждого файла пишут свой логгер
			В отдельном файле logging_compose.py
			logger = logging.getLogger(__name__)		# Задаём имя логгера = как у файла
		2. logger.info("строка информирования")
		3. Добавляют в разные файлы свои логгеры:
			logger = logging.getLogger("NameOfFile")
			f = logging.FileHandler(filename="log.log")
			logger.addHandler(f)
			logger.setLevel(logging.DEBUG)
			# f.format() - если необходимо
	Делаем ИЛИ ИНДИВИДУАЛЬНЫЕ ЛОГГЕРЫ, ИЛИ ГЛОБАЛЬНЫЙ ЛОГГЕР
	Не смешиваем концепции
	
[00:42:32]	 Какой от этого профит с практической точки зрения (для тестирования)?
	Создать логгер внутри класса. Наследоваться от него
	
[00:49:42]	AbstractEventListener
	from selenium.webdriver.support.events import EventFiringWebDriver, AbstractEventListener
	
	Абстрактный класс AbstractEventListener, от которого должен унаследоваться собственный класс
	class CustomListener(AbstractEventListener):
		переопределяем нужные нам методы.
		def before_navigate_to(self, url, driver)
		def before_find(self, ...)
		
[00:58:51]	Браузерные логи	
	Нормально эта функциональность работает в Google Chrome
	Пример:
	
	caps = DesiredCapabilities.CHROME
	options = webdriver.ChromeOptions()
	options.add_experimental_options('w3c', False)
	caps['loggingPrefs'] = {'performance':'ALL', 'browser': 'ALL', 'driver': 'ALL'}	# уровни логирования производительности и браузера
	wd = webdriver.Chrome(executable_path=f"{}/...",
						  desired_capabilities=caps,
						  options=options)
	request.addfinalizer(wd.quit)
	return wd
	
	driver.log_types:		# Доступно 3 лога
		'performance'		# Логи performance, которые можно посмотреть в браузерной панели разработчика (дебаггер, F12)
							# во вкладке Performance. С точки зрения автотестирования мало полезного
		'browser'			# Самый полезный. Ошибки, которые обычно "сыпятся" в консоль браузера
		'driver'			# Самый бесполезный, логи вебдрайвера
	
	browser log: фикстура для использования
	with open("browser.log", "w+") as f:
		for line in driver.get_log("driver"):		# Возвращается обычный словарь
			f.write(str(line))
			f.write("\n")
	Как с этим работать?
	Фильтруем все значения по "WARNING" и "SEVERE" и работаем с ними
	
	Основное:
	• Помнить, что при инициализации логгер создаётся один раз.
	• Хорошая практика - на каждый модуль делать logger = logging.getLogger(__name__)
	• Каждый логгер конфигурируем отдельно.
	• По selenium: самый удобный способ прикрутить логирование к PO - это создать его в BasePage и логировать действие
	• Если нужно дополнительно что-то залогировать на других страницах, там этот логгер уже есть.
	  Он назван, как сама страница
	
	Listener:
	from selenium.webdriver.support.events import EventFiringWebDriver, AbstractEventListener
	Конструкция:
		driver = EventFiringWebDriver(driver, MyListener())
	На каждое действие можно повесить то, что нужно.
	
	# Действия при возникновении исключения
	def on_exception(self, exception, driver):
		logging.error(f'Ooops, I have got: {exception}')
		driver.save_screenshot(f'logs/{exception}.png')
		


[01:16:11]	Proxy
	Для чего может потребоваться?
	Вкладка Network в инструментах разработчика браузера
	Мониторить метрики
	Мощная прокси mitmproxy (написана на Python)
	https://habr.com/ru/company/selectel/blog/242727/	- Анализ HTTP-трафика с Mitmproxy
	
	Проект Browsermob-proxy
	(https://github.com/lightbody/browsermob-proxy)
	Удобно, проще, чем mitmproxy
	
[01:25:15]	Создаём фикстуру (для удобства) прокси-сервера.
	@pytest.fixture
	def proxy_server(request):
		server = Server("browsermob-proxy/bin/browsermob-proxy")
		server.start()
		client = Client("localhost:8080")
		server.create_proxy()
		request.addfinalizer(server.stop)
		client.new_har()
		return client

	@pytest.fixture
	def browser(request, proxy_server):
		options = webdriver.ChromeOptions()
		# Избавляемся от ошибок сертификатов
		options.add_argument('--ignore-certificate-errors')
		
		# Install proxy-server
		proxy_url = urllib.parse.urlparse(proxy_server.proxy).path		# Создаём правильный URL для клиента
		options.add_argument('--proxy-server=%s' % proxy_url)
		
		driver = webdriver.Chrome(executable_path=f"{DRIVERS}/chromedriver", options=options)
		
		driver.proxy = proxy_server
		driver.implicitly_wait(5)
		
		def fin():
			driver.proxy.close()
			driver.quit()
			
		request.addfinalizer(fin)
		return driver
		
	HAR-file (HTTP Archive format) - формат файла
	Чтобы хранить в JSON-подобной структуре HTTP-трафик

[01:31:00]	AJAX-запросы
	Их видно с сетевом логе (в логе страницы их не видно)

[01:34:15]	Пробуем поработать с yandex.ru
