Полезные классы модуля collections

1. defaultdict()
	from collections import defaultdict
	defaultdict(int)	- работает, как счётчик вхождений элементов в массивы

	Подсчёт методов HTTP из access.log
	dict_method = defaultdict(
    int, {"GET": 0, "POST": 0, "PUT": 0, "DELETE": 0, "HEAD": 0}
)
	Полезно также использовать в качестве первого аргумента вместо int:
	list
	dict
	lambda

2. OrderDict()
	from collections import OrderDict
	Создаёт объект типа dict, элементы которого упорядочены (выводятся в том порядке, в каком их добавляли в OrderDict)

3. Counter
	from collections import Counter
	предназначен для удобных и быстрых подсчетов количества появлений неизменяемых элементов в последовательностях.
	Класс Counter() модуля collections - это подкласс словаря dict для подсчета хеш-объектов (неизменяемых, таких как строки, числа, кортежи и т.д.).
    Это коллекция, в которой элементы хранятся в виде словарных ключей, а их счетчики хранятся в виде значений словаря. 
	Передаём в Counter массив (список, кортеж, словарь)

	.most_common()
		Метод Counter.most_common(n) возвращает список из n наиболее распространенных элементов и их количество от наиболее распространенных до наименее.
		Если n опущено или None, метод cnt.most_common() возвращает все элементы в счетчике.
		return → список кортежей вида ("Значение", число вхождений)

	.elements()
		Метод Counter.elements() возвращает итератор по элементам, в котором каждый элемент повторяется столько раз, во сколько установлено его значение.
        Элементы возвращаются в порядке их появления.
        Если количество элементов меньше единицы, то метод Counter.elements() просто проигнорирует его.
```
from collections import Counter
cnt = Counter(a=4, b=2, c=0, d=-2)
sorted(cnt.elements())
#   ['a', 'a', 'a', 'a', 'b', 'b']
```
	
4. operator.itemgetter(index)
	Функция возвращает вызываемый объект, который выбирает элемент из своего операнда, используя метод операнда __getitem__(). Если указано несколько элементов, возвращает кортеж значений.
	Полезно использовать в sorted() в качестве значения параметра key=
	for request in sorted(all_requests, key=operator.itemgetter(-1), reverse=True):
		# отсортировать в порядке по убыванию по элементу с индексом [-1] и вывести элементы массива

5. Если в цикле for или while нужно дополнительно итерировать ещё одну последовательность:
	i = iter(array)		# преобразуем последовательность в итератор
	i.__next__()		# обходим итератор поэлементно
		или
	next(i)

