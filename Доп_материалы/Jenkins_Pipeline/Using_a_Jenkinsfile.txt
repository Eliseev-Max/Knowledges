(https://www.jenkins.io/doc/book/pipeline/jenkinsfile/)
Использование Jenkinsfile

Наиболее полезные шаги, общие шаблоны и некоторые нетривиальные примеры Jenkinsfile

Преимущества Jenkinsfile, располагающегося в системе контроля версий:
	• возможность проверки кода и итераций в Pipeline
	• журнал аудита Pipeline
	• единый источник достоверной информации для Pipeline, который могут просматривать и редактировать несколько участников проекта
	
Pipeline поддерживает 2 синтаксиса: Декларативный и Скриптовый
Оба синтаксиса поддерживают Continuous Delivery (CD) - pipelines

Jenkinsfile — это текстовый файл, содержащий определение конвейера Jenkins и зарегистрированный в системе управления версиями.


Jenkinsfile (Declarative Pipeline)		# Минимально необходимая структура для реализации pipeline

pipeline {
    agent any						# выделяет исполнителя и рабочую область (workspace) в Pipeline

    stages {
        stage('Build') {
            steps {
                echo 'Building..'
            }
        }
        stage('Test') {
            steps {
                echo 'Testing..'
            }
        }
        stage('Deploy') {
            steps {
                echo 'Deploying....'
            }
        }
    }
}

	* директива agent:
		указывает, где будет выполняться весь pipeline или определенный этап (stage) в среде Jenkins 
		(зависит от того, где размещен раздел agent)
		ОБЯЗАТЕЛЬНО! agent определён на верхнем уровне внутри блока pipeline
		Произвольно: на уровне этапа (stage)
		По умолчанию директива агента гарантирует, что исходный репозиторий извлечен и доступен для шагов на последующих этапах.
	
	* директивы stages (stage) и steps также необходимы для корректного (валидного) составления Declarative Pipeline,
	  поскольку они указывают Jenkins-у, что выполнять и какой этап должен быть выполнен.
		



Настройка Pipeline с помещённым в SCM (Source Code Management, система контроля версий) Jenkinsfile
  * Jenkinsfile должен находиться в корне директории проекта
	Преднастройка Pipeline через классический пользовательский интерфейс Jenkins:
		1. Если необходимо, убедиться, что мы вошли в систему в Jenkins
		2. Домашняя страница Jenkins (Dashboard) → New Item
		3. Задать имя для своего Pipeline-проекта
		   (ВНИМАНИЕ! Jenkins использует заданное имя для создания директорий на диске.
		   Рекомендуется избегать использования пробелов в именах элементов, так как это может выявить ошибки в сценариях,
		   которые неправильно обрабатывают пробелы в путях к каталогам)
		4. Прокрутить вниз → кликнуть по пункту Pipeline → кликнуть по кнопке OK, чтобы перейти на страницу конфигурации Pipeline
		5. ...

Встроенная документация (Built-in documentation)
	Pipeline поставляется со встроенными функциями документирования, упрощающими создание конвейеров различной сложности.
	Эта встроенная документация создается и обновляется автоматически на основе подключаемых модулей, установленных в экземпляре Jenkins.

	Встроенную документацию можно найти по адресу ${YOUR_JENKINS_URL}/pipeline-syntax.
	Эта же документация также связана как Синтаксис pipeline на боковой панели для любого настроенного проекта Pipeline.

Генератор фрагментов (сниппетов)
	Встроенная утилита «Генератор фрагментов» полезна для 
		- создания фрагментов кода для отдельных шагов,
		- обнаружения новых шагов, предоставляемых плагинами, 
		- экспериментов с различными параметрами для определенного шага.

	Генератор фрагментов динамически заполняется списком шагов, доступных для экземпляра Jenkins.
	Количество доступных шагов зависит от установленных подключаемых модулей, которые явно предоставляют шаги для использования в Pipeline.

	Чтобы сгенерировать пошаговый сниппет с помощью генератора сниппетов:
		1. перейти по ссылке синтаксиса pipeline (упомянутой выше) из настроенного конвейера или по адресу ${YOUR_JENKINS_URL}/pipeline-syntax;
		2. выбрать нужный шаг в раскрывающемся меню Sample Step;
		3. использовать динамически заполняемую область под раскрывающимся списком Sample Step, чтобы настроить выбранный шаг.
		4. нажать «Создать скрипт конвейера», чтобы создать фрагмент конвейера, который можно скопировать и вставить в pipeline.
	Получить доступ к дополнительной информации и/или документации о выбранном шаге → щёлкнуть значок справки (?)
	
Справочник по глобальным переменным

	В дополнение к Генератору фрагментов, который отображает только шаги, Pipeline также предоставляет встроенную «Глобальную ссылку на переменную».
	Как и генератор сниппетов, он также динамически заполняется плагинами.
	* Отличие от Генератора фрагментов: 
		справочник по глобальным переменным содержит только документацию по переменным, предоставляемым Pipeline или подключаемыми модулями,
		которые доступны для Pipelines.

	Переменные, предоставляемые по умолчанию в Pipeline:
		• env
		• params
		• currentBuild
	
Генератор декларативных директив (Declarative Directive Generator)

(https://www.jenkins.io/doc/book/pipeline/getting-started/)
	also:
https://www.jenkins.io/doc/book/pipeline/jenkinsfile/	-	Using a Jenkinsfile
https://www.jenkins.io/doc/book/pipeline/syntax/		-	Pipeline Syntax
https://www.jenkins.io/doc/book/pipeline/docker/		-	Using Docker with Pipeline