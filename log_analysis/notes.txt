"""
Требования к реализации
    Должна быть возможность указать директорию где искать логи или конкретный файл
    Должна быть возможность обработки всех логов внутри одной директории

    Для access.log должна собираться следующая информация:

    общее количество выполненных запросов
    количество запросов по типу: GET - 20, POST - 10 и т.п.     >> готовый инструмент, осталось убрать |
    топ 3 IP адресов, с которых были сделаны запросы
    топ 3 самых долгих запросов, должно быть видно метод, url, ip, время запроса

    Собранная статистика должна быть сохранена в json файл и выведена в терминал в свободном (но понятном!) формате
    Должен быть README.md файл, который описывает как работает скрипт

"""


# os.path.exists(path) - возвращает True, если path указывает на существующий путь или дескриптор открытого файла.
# os.path.abspath(path) - возвращает нормализованный абсолютный путь
# os.path.expanduser(path) - заменяет ~ или ~user на домашнюю директорию пользователя.
# os.path.isfile(path) - является ли путь файлом
# os.path.isdir(path) - является ли путь директорией.
# os.path.normpath(path) - нормализует путь, убирая избыточные разделители и ссылки на предыдущие директории.
#                          На Windows преобразует прямые слеши в обратные.



OrderedDict в Python – это подкласс dict, который поддерживает порядок вставки элементов.
Когда мы перебираем OrderedDict, элементы возвращаются в том порядке, в котором они были вставлены.
Обычный словарь не отслеживает порядок вставки. Поэтому при повторении элементы возвращаются в произвольном порядке.
https://docs-python.ru/standart-library/modul-collections-python/klass-ordereddict-modulja-collections/

# https://docs-python.ru/standart-library/modul-re-python/sintaksis-reguljarnogo-vyrazhenija/
# https://tproger.ru/translations/regular-expression-python/
# https://pythonru.com/primery/primery-primeneniya-regulyarnyh-vyrazheniy-v-python