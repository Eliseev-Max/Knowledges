Операционные системы

[00:04:47]	Операционная система в первую очередь предоставляет среду для исполнения приложений.
			Делает она это через свои библиотеки и свои системные вызовы (интерфейс системных вызовов).
	* Утилита strace

[00:05:40]	Какие существуют операционные системы:
	
	• Microsoft Windows
	• GNU Linux
	• MacOS
	• BSD → MacOS, IOS
	• Solaris
	• HP UX
	• WebOS
	• OS2 (E-station?)
	• Plan9
	• React OS (~ядро NT)
	• Kalibrix
	• AIX
	• QNX
	• DOS, FreeDOS
	• Symbian
	• Minix
	• Blackberry OS
	• Minuet OS
	• NeXTSTEP (от компании NeXT)
	
[00:09:40]
	Сколько ОС в телефоне?
	Как минимум, две: одна - ОС смартфона, одна - на SIM-карте.

[00:10:30]	UNIX®
	
	1969г. (AT&T/Bell Labs: Томпсон, Керниган, Ритчи)
	Распространялась свободно
	Стандарт де-факто и де-юре (POSIX)
	POSIX = Portable Operating System Interface [for UniX]
	POSIX мобильна.
	AIX, Solaris, MacOS X/FreeBSD/NetBSD/OpenBSD - генетически UNIX®
	Linux, Minix - реализации
	У Minix была проблема с лицензией: она была не достаточно свободной.
	Можно было делать свои модификации, но нельзя было распространять модифицированные версии.
	Сначала Линуса Торвальдса не устроил эмулятор терминала Minix,
	затем он внёс исправления, чтобы появилась 	возможность загружаться с дискеты
	потом понадобилась файловая система, совместимая с Minix
	... в конце концов он обнаружил, что у него получилась ОС
	Есть реализации POSIX для Windows (в Windows можно доустановить POSIX-систему)
	UNIX - зарегистрированный товарный знак (торговая марка), поэтому стали использовать обозначение: *nix
	
[00:17:00] Вкратце о том, какие стандарты описаны в POSIX
		   Для того, чтобы программа могла исполняться, должно сохраняться следование стандарту.
		   + библиотечный стандарт для языков C/C++ (STL)
	Другой вариант написать переносимую программу: написать её для некой среды исполнения.
	► Runtime (термин возник в связи с идеей при загрузке машины загружать в память набор необходимых библиотек)
	Среды исполнения:
	  • Shell
	  • Java
	  • Perl/Python (любой интерпретируемый язык программирования)

[00:18:05] Какие функции должна выполнять ОС
	
	Чего программы хотят от ОС:
		• абстракцию оборудования;
		• координацию совместной работы с устройствами;
		• изоляцию сбойных приложений;
		• обмен между приложениями.

[00:21:10] Как устроена ОС
	
	   [Пользователь]
		    ▲ ▼
	    [Приложение]
		    ▲ ▼
	[Операционная система]
		    ▲ ▼
	   [Оборудование]

	Существуют ОС с экзоядром, которые не обеспечивают изоляцию программ от оборудования.
	Например ОС в SIM-картах
	
[00:22:05]	Какие сервисы предлагает ОС?
			♦ Процессы
			♦ Память
			♦ Содержимое файлов (возможность работы с файлами)
			♦ Каталоги и имена файлов
			♦ Безопасность
			♦ ...(пользователи, IPC, сеть, терминалы)
			  IPC - взаимодействие между процессами

[00:24:30]	Как приложения обращаются к системе?
			ABI - syscalls		# Системные вызовы
	# Параметры ниже передаются через регистры
	mov edx,len										# Загрузить в регистр edx (32-разрядный) длину сообщения
	mov ecx,msg										# Загрузить в регистр ecx адрес сообщения
	mov ebx,1		;file descriptor (stdout)		# ebx - Регистр, указывающий, в какой файл будет производиться запись [*]
	mov eax,4		;system call number (sys_write)	# Загрузить в регистр eax номер системного вызова
	int    0x80		;call kernel					# команда процессора на программное прерывание
	mov    eax,1	;system call number				# Записать в регистр eax код завершения
	(sys_exit)
	int    0x80		;call kernel
	section  .data
	    'Hello, world!' ,0xa
	
	[*] в системах UNIX 0 = стандартный вход (STDIN), 1 = стандартный выход (STDOUT)
	
	В рамках процессоров Intel и совместимых с ними системные вызововы - это, как правило, прерывания
	В ОС Windows это прерывание 2i (16x-запись)
	int = на время запретить другие прерывания и произвести вызов ОС
	nasm - команда ассемблирования
	После процедуры ассемблирования получается файл filename.o - это обхектный файл, не годится для выполнения
	gdb - отладчик, под ним можно запускать программы
	
[00:31:50]	Что плохо в этом примере?
	
	Так не пишут. Пишут так:
	
	int main(){
		__asm__(
			"movl $20, %eax	    \n"			# $20 = загрузить константу
			"call *%gs:0x10    \n"
			"movl %eax, pid    \n"
		);
		printf("pid is %d\n", pid);
		return 0;
	}
	Сейчас не используется прерывание int 80;
	Используют sysrnter и sysexit
	
	Классический Linux использует для загрузки пакет initscripts
	В нём есть конфигурационный файл /etc/inittab
		→ id:5:initdefault (5 = запуск графической оболочки)
	
[00:37:00]	Как понять, что происходит при работе программы?

	Утилита strace
	Она показывает каждый системный вызов, который делает программа
	$ strace ./program_name
	strace позволяет, не имея исходников, методом "чёроного ящика" посмотреть, в каком месте программа прекращает работу.
	strace -f		-f = follow_forks, следовать за потомками - отслеживать дочерние процессы.
	strace -e		[-e] позволяет фильтровать по искомому значению.
	
	# strace -f -e open sh
	
	Утилита ltrace
		- посмотреть библиотечные вызовы
	
[00:44:20]	Shell: /bin/*sh (программная оболочка)
