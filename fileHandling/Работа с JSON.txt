"""
[Python_Object] ->-(json.dump())->-{JSON_file.json}
[Python_Object] ->-(json.dumps())->-{JSON_notation_string_in_Python}
{JSON_file.json} ->►(json.load(JSON_file.json))->►[Python_Object]
{JSON_notation_string_in_Python} ->► (json.loads())->►[Python_Object]
"""
Кодирование данных в формат JSON
dumps(<Кодируемое значение>[, skipkeys=False]
							[, ensure_ascii=True]
							[, allow_nan=True]
							[, indent=None]
							[, separators=None]
							[, sort_keys=False]
							[, default=None]
							[, cls=None])
<Кодируемое значение>: строка, целое число, вещественное число, логическая величина, None, список, кортеж, словарь
skipkeys=True: значения неподдерживаемых типов будут игнорироваться
ensure_ascii управляет представлением в закодированных данных символов, не входящих в кодовую таблицу ANSI.
	False - просто помещать закодированные данные как есть
	True - представлять данные в виде кодов (по умолчанию)
allow_nan - обработка вещественных значений nan, inf, -inf, которые могут встретиться в кодируемых данных.
	False - возбудить исключение ValueError 
	True - представить такие данные в виде JavaScript-значений NaN, Infinity и -Infinity (по умолчанию).
indent - указывает величину отступов, используемых для форматирования выводимых данных
	None - отсутствие отступов и переводов строки для получения закодированных данных минимального объёма (по умолчанию) 
	0, отрицательное число или пустая строка - отсутствие отступов, однаео переводы строк вставляются
	число - вставляются отступы из пробелов, количество которых равно указанному числу
	строка - вставляются отступы, в качестве которых используется указанная строка
separators - указывает разделители, которыми в закодированных данных будут разделяться отдельные элементы списка или словаря,
			а также ключи и значения элементов в словаре.
			Значение параметра = кортеж из двух элементов:
				первый элемент кортежа = разделитель элементов
				второй элемент кортежа = разделитель ключей и значений.
	None == (, :) {"key1":"val_1", "key2":"val_2"} (по умолчанию)
sort_keys - управляет сортировкой ключей.
	False - отключить сортировку (по умолчанию) 
	True - включить сортировку
Если требуется записать результат в файловый объект:
dump(<Кодируемое значение>,<Файловый объект>[, skipkeys=False]
											[, ensure_ascii=True]
											[, allow_nan=True]
											[, indent=None]
											[, separators=None]
											[, sort_keys=False]
											[, default=None][, cls=None])
Декодирование данных JSON в соответствующий им объект:
loads(<декодируемые данные>[, parse_int=None][, parse_float=None][parse_constant=None][object_pairs_hook=None][object_hook=None])
	<декодируемые данные>: строка, [объект bytes или bytearray] [в кодировке UTF-8, UTF-16, UTF-32]
	parse_int - задаёт функцию, которая будет использоваться для декодирования целых чисел. По умолчанию int()
	parse_float - задаёт функцию, которая будет использоваться для декодирования вещественных чисел. По умолчанию float()
		Функция-декодер: func(строка,содерж. кодироваанное значение) -> декодированное значение
	parse_constant - указывает функцию, которая будет применяться для декодирования значений NaN, Infinity и -Infinity языка JavaScript.
		Если параметр не указан, возвращается nan, inf, -inf
	object_pairs_hook
	object_hook
1. Python имеет встроенный модуль json, который может использоваться для работы с данными JSON.
>>> import json
2. С помощью Python можно сформировать файл JSON (сериализовать).
	Для этого сделаем следующее:
	2.1 структуру JSON-файла передадим переменной:
		data = {
			"ip" : "ip-адрес",
			"port" : "TCP-порт",
			"login" : "admin",
			"pass" : "admin",
			"timeout" : "Таймаут в сек"
			}
	2.2 запишем данные в файл с форматом JSON, используя функцию dump:
		with open("MyFirstJSON.json", "w") as write_file:
			json.dump(data, write_file)
	2.3 файл MyFirstJSON.json создастся в той же директории, что и исполняемый файл python.
	
	Если в данных Python есть символы кириллицы, метод json.dumps() преобразует их с кодировкой по умолчанию.
	Что бы сохранить кириллицу используйте параметр ensure_ascii=False
	
	
3. Данные JSON можно представить в виде строки в Python:
	json_string = json.dumps(data)
	
	Если в данных Python есть символы кириллицы, метод json.dumps() преобразует их с кодировкой по умолчанию.
	Что бы сохранить кириллицу используйте параметр ensure_ascii=False
	json_string = json.dumps(data, ensure_ascii=False)			# ensure - обеспечить
	
dump записывает объект Python в файл JSON
dumps сохраняет объект Python и хранит его в виде строки с нотацией.

3. Десериализация (преобразование файла JSON в объект Python):
load: чтение и вывод JSON-файла на экран (file.json -> Python object)
>>> with open("your_file.json", "r") as f:
...     data = json.load(f)
>>> data
{'president': {'name': 'Joe Biden', 'species': 'homo'}}
>>> type(data)
dict
loads: преобразование строки с JSON нотацией в словарь